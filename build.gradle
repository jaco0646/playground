import org.springframework.boot.gradle.tasks.run.BootRun

import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

plugins {
    id 'groovy'
    id 'org.springframework.boot' version "$springBootVersion"
//    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'project-report'  // htmlDependencyReport
    id 'com.gorylenko.gradle-git-properties' version '2.3.1'
    id 'com.google.cloud.tools.jib' version '3.0.0'  // jibDockerBuild
}

group 'com.playground'
version '1.0-SNAPSHOT'

sourceCompatibility = 16
targetCompatibility = 16

jib {
    from.image = 'adoptopenjdk:16-jre'
    to.image = "$group/$version".toLowerCase()
    container.creationTime = 'USE_CURRENT_TIMESTAMP'
    container.mainClass = 'spring.Application'
    container.jvmFlags = ['--enable-preview']
    container.ports = ['8080']
}

springBoot {
    mainClass.set(jib.container.mainClass)
}

// For actuator/info
gitProperties {
    dateFormat = 'yyyy-MM-dd h:mm a z'
    keys = ['git.branch', 'git.build.version', 'git.commit.id', 'git.commit.time']
    customProperty 'git.commit.count', { it.repository.jgit.log().call().size() }  // https://github.com/n0mer/gradle-git-properties/blob/master/src/main/groovy/com/gorylenko/properties/CacheSupport.groovy#L30
    customProperty 'git.build.artifact', { bootJar.archiveFileName.get() }
    customProperty 'git.build.java-version', { System.getProperty('java.version') }
    customProperty 'git.build.spring-boot-version', { springBootVersion }
    customProperty 'git.build.time', { DateTimeFormatter.ofPattern(dateFormat).format(ZonedDateTime.now()) }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '--enable-preview'
}
tasks.withType(Test) {
    jvmArgs += '--enable-preview'
}
tasks.withType(BootRun) {
    jvmArgs = ['--enable-preview']
}

tasks.register('bootRunLocal', BootRun) {
    it.group = 'Application'
    it.description = /Equivalent to gradle bootRun --args='--spring.profiles.active=local'/
    it.dependsOn = [bootJar]
    it.mainClass.set(bootJar.mainClass)
    it.classpath = sourceSets.main.runtimeClasspath
    it.args = ['--spring.profiles.active=local']
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.8'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.reflections:reflections:0.9.12'

    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-devtools:$springBootVersion"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:$springCloudVersion"

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    runtimeOnly 'org.postgresql:postgresql:42.2.20'
    runtimeOnly 'com.h2database:h2:1.4.200'

    testImplementation "org.spockframework:spock-core:$spockVersion"
    testImplementation "org.spockframework:spock-spring:$spockVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.29.1'
}

test {
    useJUnitPlatform()
    afterSuite { desc, result ->
        if (!desc.parent) {
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build.")
            }
        }
    }
}